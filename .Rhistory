mutate(lm = aux$fit,
up_lm = aux$upr,
dn_lm = aux$lwr)
View(pred1)
pred <- test %>%
mutate(lm = aux$fit,
up_lm = aux$upr,
dn_lm = aux$lwr)
aux <- model2 %>%
predict.lm(
newdata = test,
interval = 'prediction',
type = 'response')
#Regresión lineal bayesiana
model2 <- stan_lm(sales ~ gdp, train, prior = NULL, seed = 2016)
coef2 <- tidy(model2)
aux <- model2 %>%
predict.lm(
newdata = test,
interval = 'prediction',
type = 'response')
aux <- model2 %>%
predict.lm(
newdata = test,
interval = 'prediction',
type = 'response')
aux <- model2 %>%
predict.lm(
newdata = test,
interval = 'prediction',
type = 'response')
aux <- model2 %>%
posterior_predict(
newdata = test)
View(aux)
?posterior_linpred.stanreg
aux <- model2 %>%
posterior_linpred(
newdata = test)
View(aux)
newdata = test) %>%
colMeans()
newdata = test) %>%
aux <- colMeans(aux)
aux <- model2 %>%
posterior_linpred(
newdata = test) %>%
pred <- test %>%
mutate(lm = aux$fit,
up_lm = aux$upr,
dn_lm = aux$lwr)
newdata = test) %>%
pred <- pred %>%
mutate(blm = colMeans(aux))
aux <- model2 %>%
posterior_linpred(
newdata = test)
pred <- pred %>%
mutate(blm = colMeans(aux))
View(pred)
pred <- pred %>%
mutate(blm = colMeans(aux),
up_blm = quantile(aux, probs = .975))
View(pred)
pred <- pred %>%
mutate(blm = colMeans(aux),
up_blm = quantile(aux, probs = .975),
dn_blm = quandl_api_key(aux, probs = .025))
pred <- pred %>%
mutate(blm = colMeans(aux),
up_blm = quantile(aux, probs = .975),
dn_blm = quantile(aux, probs = .025))
?predictive_interval()
aux <- model2 %>%
predictive_interval(
newdata = test)
View(aux)
aux <- model2 %>%
posterior_predict(
newdata = test)
pred <- pred %>%
mutate(blm = colMeans(aux))
View(pred)
aux <- as_data_frame(aux)
View(aux)
mean(aux$`1`)
mean(aux$`2`)
blm <- c()
blm <- c()
up_blm <- c()
dn_blm <- c()
for (i in ncol(aux)) {
blm[i] <- mean(aux[,i])
}
for (i in ncol(aux)) {
blm[i] <- mean(aux[,i])
}
for (i in ncol(aux)) {
blm[i] <- colMeans(aux[,i])
}
mean(aux[,1])
aux <- model2 %>%
posterior_predict(
newdata = test)
aux <- as_data_frame(aux)
View(aux)
mean(aux[,1])
colMeans(aux)
pred$blm <- colMeans(aux)
View(pred)
quantile(aux[,1],probs = c(.025,.975))
quantile(aux$`1`,probs = c(.025,.975))
quantile(aux$`2`,probs = c(.025,.975))
aux <- model2 %>%
posterior_predict(
newdata = test)
pred$blm <- colMeans(aux)
View(pred)
aux <- as_data_frame(aux)
pred$blm <- colMeans(aux)
aux <- model2 %>%
posterior_predict(
newdata = test)
aux <- as_data_frame(aux)
pred$blm <- colMeans(aux)
View(pred)
aux <- model2 %>%
posterior_predict(
newdata = test)
aux <- as_data_frame(aux)
View(aux)
colMeans(aux)
pred$blm <- colMeans(aux)
View(pred)
aux[,i]
for (i in ncol(aux)) {
q <- quantile(aux[,i],probs = c(.025,.975))
ub_blm <- q[1]
dn_blm <- q[2]
}
for (i in ncol(aux)) {
q <- quantile(as_vectoR(aux[,i]),probs = c(.025,.975))
ub_blm <- q[1]
dn_blm <- q[2]
}
for (i in ncol(aux)) {
q <- quantile(as.vectoR(aux[,i]),probs = c(.025,.975))
ub_blm <- q[1]
dn_blm <- q[2]
}
for (i in ncol(aux)) {
q <- quantile(as.vector(aux[,i]),probs = c(.025,.975))
ub_blm <- q[1]
dn_blm <- q[2]
}
class(aux)
class(aux$`1`)
class(unlist(aux$`1`))
class(c(aux$`1`))
for (i in ncol(aux)) {
q <- quantile(c(aux[,i]),probs = c(.025,.975))
ub_blm <- q[1]
dn_blm <- q[2]
}
aux <- model2 %>%
predictive_interval()
View(aux)
aux <- model2 %>%
predictive_interval(
newdata = test
)
View(aux)
pred <- pred %>%
mutate(up_blm = aux[,1],
dn_blm = aux[,2])
View(pred)
aux <- model3 %>%
forecast(xreg = test$gdp)
#ARIMAX
model3 <- auto.arima(train$sales, xreg = train$gdp)
coef3 <- tidy(model3)
aux <- model3 %>%
forecast(xreg = test$gdp)
#ARIMAX
model3 <- auto.arima(train$sales, xreg = train$gdp)
coef3 <- tidy(model3)
aux <- model3 %>%
forecast(xreg = test$gdp)
View(aux)
aux[["lower"]]
aux[["upper"]]
?forecast
aux <- model3 %>%
forecast(xreg = test$gdp,
level = c(.025,.975))
View(aux)
aux[["lower"]]
aux[["upper"]]
aux <- model3 %>%
forecast(xreg = test$gdp,
level = c(.975))
View(aux)
aux[["lower"]]
aux <- model3 %>%
forecast(xreg = test$gdp,
level = c(.025,.975))
?forecast
aux <- model3 %>%
forecast.arima(xreg = test$gdp,
level = c(.025,.975))
aux <- model3 %>%
forecast.Arima(xreg = test$gdp,
level = c(.025,.975))
library(forecast)
aux <- model3 %>%
forecast.Arima(xreg = test$gdp,
level = c(.025,.975))
aux <- model3 %>%
forecast(xreg = test$gdp,
level = c(.025,.975))
View(aux)
pred <- pred %>%
mutate(arimax = aux$fitted,
up_arimax = aux[['lowe']][1])
aux <- model3 %>%
forecast(xreg = test$gdp,
level = c(.025,.975))
pred <- pred %>%
mutate(arimax = aux$fitted)
#ARIMAX
model3 <- auto.arima(train$sales, xreg = train$gdp)
coef3 <- tidy(model3)
aux <- model3 %>%
forecast(xreg = test$gdp,
level = c(.025,.975))
pred <- pred %>%
mutate(arimax = aux$fitted)
View(aux)
aux[["fitted"]]
View(test)
test$gdp
View(aux)
aux[["fitted"]]
aux <- model3 %>%
forecast()
aux <- model3 %>%
forecast(xreg = test$gdp)
View(aux)
aux <- model3 %>%
predict(newxreg = test$gdp)
View(aux)
aux <- model3 %>%
predict(newxreg = test$gdp)$pred
pred <- pred %>%
mutate(arimax = aux$pred)
#ARIMAX
model3 <- auto.arima(train$sales, xreg = train$gdp)
coef3 <- tidy(model3)
aux <- model3 %>%
predict(newxreg = test$gdp)
pred <- pred %>%
mutate(arimax = aux$pred)
aux$pred
forecast(model3, newxreg = test$gdp)
forecast(model3, xreg = test$gdp)
View(aux)
?predict
aux <- model3 %>%
forecast(newxreg = test$gdp)
aux <- model3 %>%
forecast(xreg = test$gdp)
View(aux)
forecast(model3, xreg = test$gdp)
aux <-  forecast(model3,xreg = test$gdp)
aux
summary(aux)
aux <-  summary(forecast(model3,xreg = test$gdp))
pred <- pred %>%
mutate(arimax = aux$`Point Forecast`.
up_arimax = aux$`Lo 95`,
dn_arimax = aux$`Hi 95`)
pred <- pred %>%
mutate(arimax = aux$`Point Forecast`,
up_arimax = aux$`Lo 95`,
dn_arimax = aux$`Hi 95`)
View(pred)
View(aux)
pred <- pred %>%
mutate(arimax = aux$`Point Forecast`,
up_arimax = aux$`Hi 95`,
dn_arimax = aux$`Lo 95`)
#Regresión Lineal
model1 <- lm(sales ~ gdp, train)
coef1 <- tidy(model1)
aux <- model1 %>%
predict.lm(
newdata = test,
interval = 'prediction',
type = 'response')
aux <- as_data_frame(aux)
pred <- test %>%
mutate(lm = aux$fit,
up_lm = aux$upr,
dn_lm = aux$lwr)
#Incremento barra
incProgress(1/n, detail = 'Ajustando Regresión Lineal Bayesiana') #2
#Regresión lineal bayesiana
model2 <- stan_lm(sales ~ gdp, train, prior = NULL, seed = 2016)
coef2 <- tidy(model2)
aux <- model2 %>%
posterior_predict(
newdata = test)
aux <- as_data_frame(aux)
pred$blm <- colMeans(aux)
aux <- model2 %>%
predictive_interval(
newdata = test
)
pred <- pred %>%
mutate(up_blm = aux[,2],
dn_blm = aux[,1])
#ARIMAX
model3 <- auto.arima(train$sales, xreg = train$gdp)
coef3 <- tidy(model3)
aux <-  summary(forecast(model3,xreg = test$gdp))
pred <- pred %>%
mutate(arimax = aux$`Point Forecast`,
up_arimax = aux$`Hi 95`,
dn_arimax = aux$`Lo 95`)
#Modelo Espacio estado
ss <- AddLocalLinearTrend(list(), train$sales) #tendencia
ss <- AddSeasonal(ss, train$sales, nseasons = 4)
model4 <- bsts(train$sales ~ train$gdp,
state.specification = ss,
niter = 2000,
ping=0, seed=2016)
### Get a suggested number of burn-ins
burn <- SuggestBurn(0.1, bsts.model)
### Get a suggested number of burn-ins
burn <- SuggestBurn(0.1, model4)
### Get the average coefficients when variables were selected (non-zero slopes)
coef4 <- cbind.data.frame(
colMeans(model4$state.contributions[-(1:burn),"trend",]),
colMeans(model4$state.contributions[-(1:burn),"seasonal.4.1",]),
colMeans(model4$state.contributions[-(1:burn),"regression",]),
train$date)
names(model4) <- c("Trend", "Seasonality", "Regression", "Date")
aux <- predict.bsts(model4, newdata = test$gdp, burn = burn, quantiles = c(,025,.975))
aux <- predict.bsts(model4,
horizon = length(test$sales),
newdata = test$gdp,
burn = burn,
quantiles = c(.025,.975))
#Modelo Espacio estado
ss <- AddLocalLinearTrend(list(), train$sales) #tendencia
ss <- AddSeasonal(ss, train$sales, nseasons = 4)
model4 <- bsts(train$sales ~ train$gdp,
state.specification = ss,
niter = 2000,
ping=0, seed=2016)
### Get a suggested number of burn-ins
burn <- SuggestBurn(0.1, model4)
aux <- predict.bsts(model4,
horizon = length(test$sales),
newdata = test$gdp,
burn = burn,
quantiles = c(.025,.975))
View(aux)
aux[["interval"]]
pred <- pred %>%
mutate(ssm = aux$mean,
up_ssm = aux[['interval']][2,],
dn_ssm = aux[['interval']][1,]
)
View(pred)
#Modelo Espacio estado
ss <- AddLocalLinearTrend(list(), train$sales) #tendencia
model4 <- bsts(train$sales ~ train$gdp,
state.specification = ss,
niter = 2000,
ping=0, seed=2016)
### Get a suggested number of burn-ins
burn <- SuggestBurn(0.1, model4)
#predict
aux <- predict.bsts(model4,
horizon = length(test$sales),
newdata = test$gdp,
burn = burn,
quantiles = c(.025,.975))
pred <- pred %>%
mutate(ssm = aux$mean,
up_ssm = aux[['interval']][2,],
dn_ssm = aux[['interval']][1,]
)
View(pred)
runApp('Labs/session6/forecast')
runApp('~/R4Finance/Labs/session6/forecast')
#Regresión Lineal
model1 <- lm(sales ~ gdp, train)
coef1 <- tidy(model1)
aux <- model1 %>%
predict.lm(
newdata = test,
interval = 'prediction',
type = 'response')
aux <- as_data_frame(aux)
pred <- test %>%
mutate(lm = aux$fit,
up_lm = aux$upr,
dn_lm = aux$lwr)
View(pred)
runApp('Labs/session6/forecast')
runApp('~/R4Finance/Labs/session6/forecast')
runApp('~/R4Finance/Labs/session6/forecast')
#ARIMAX
model3 <- auto.arima(train$sales, xreg = train$gdp)
coef3 <- tidy(model3)
aux <-  summary(forecast(model3,xreg = test$gdp))
pred3 <- test %>%
mutate(arimax = aux$`Point Forecast`,
up_arimax = aux$`Hi 95`,
dn_arimax = aux$`Lo 95`)
runApp('Labs/session6/forecast')
runApp('~/R4Finance/Labs/session6/forecast')
?stan_lm
coef2 <- tidy(model2)
aux <- model2 %>%
posterior_predict(
newdata = test)
aux <- as_data_frame(aux)
pred2 <- test %>%
mutate(blm = colMeans(aux))
aux <- model2 %>%
predictive_interval(
newdata = test
)
pred2 <- pred2 %>%
mutate(up_blm = aux[,2],
dn_blm = aux[,1])
View(pred2)
runApp('Labs/session6/forecast')
runApp('~/R4Finance/Labs/session6/forecast')
#Modelo Espacio estado
ss <- AddLocalLinearTrend(list(), train$sales) #tendencia
model4 <- bsts(train$sales ~ train$gdp,
state.specification = ss,
niter = 2000,
ping=0, seed=2016)
### Get a suggested number of burn-ins
burn <- SuggestBurn(0.1, model4)
#predict
aux <- predict.bsts(model4,
horizon = length(test$sales),
newdata = test$gdp,
burn = burn,
quantiles = c(.025,.975))
pred <- pred %>%
mutate(ssm = aux$mean,
up_ssm = aux[['interval']][2,],
dn_ssm = aux[['interval']][1,]
)
### Get the average coefficients when variables were selected (non-zero slopes)
coef4 <- cbind.data.frame(
colMeans(model4$state.contributions[-(1:burn),"trend",]),
colMeans(model4$state.contributions[-(1:burn),"regression",]),
train$date)
names(model4) <- c("Trend", "Seasonality", "Regression", "Date")
runApp('~/R4Finance/Labs/session6/forecast')
coef1
runApp('Labs/session6/forecast')
confint(model1)
coef2
runApp('Labs/session6/forecast')
View(pred3)
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('~/R4Finance/Labs/session6/forecast')
runApp('Labs/session6/forecast')
View(pred2)
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
library(egg)
View(pred1)
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
runApp('Labs/session6/forecast')
rsconnect::deployApp(here::here('labs','session6','forecast'))
rsconnect::deployApp(here::here('labs','session6','forecast'))
source(here::here('helpers', 'helpers.R'))
source('/helpers/helpers.R')
source('~/helpers/helpers.R')
source('/helpers/helpers.R')
getwd
getwd()
rsconnect::deployApp(here::here('labs','session6','forecast','app.R'))
rsconnect::deployApp(here::here('labs','session6','forecast'))
